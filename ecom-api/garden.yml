kind: Module

# The type of this module.
type: kubernetes

# The name of this module.
name: ecom-api

# Specify how to build the module. Note that plugins may define additional keys on this object.
#
# build:
  # A list of modules that must be built before this module is built.
  #
  # dependencies:
  #   - name: some-other-module-name
    #-# Module name to build ahead of this module.
      #
      # name:

      # Specify one or more files or directories to copy from the built dependency to this module.
      #
      # copy:
        #-# POSIX-style path or filename of the directory or file(s) to copy to the target.
          #
          # source:

          # POSIX-style path or filename to copy the directory or file(s), relative to the build directory.
          # Defaults to to same as source path.
          #
          # target:

# A description of the module.
#
# description:

# Set this to `true` to disable the module. You can use this with conditional template strings to disable modules
# based on, for example, the current environment or other variables (e.g. `disabled: \${environment.name == "prod"}`).
# This can be handy when you only need certain modules for specific environments, e.g. only for development.
#
# Disabling a module means that any services, tasks and tests contained in it will not be deployed or run. It also
# means that the module is not built _unless_ it is declared as a build dependency by another enabled module (in which
# case building this module is necessary for the dependant to be built).
#
# If you disable the module, and its services, tasks or tests are referenced as _runtime_ dependencies, Garden will
# automatically ignore those dependency declarations. Note however that template strings referencing the module's
# service or task outputs (i.e. runtime outputs) will fail to resolve when the module is disabled, so you need to make
# sure to provide alternate values for those if you're using them, using conditional expressions.
#
# disabled:

# Specify a list of POSIX-style paths or globs that should be regarded as the source files for this module. Files that
# do *not* match these paths or globs are excluded when computing the version of the module, when responding to
# filesystem watch events, and when staging builds.
#
# Note that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source
# tree, which use the same format as `.gitignore` files. See the Configuration Files guide
# (https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.
#
# Also note that specifying an empty list here means _no sources_ should be included.
#
# If neither `include` nor `exclude` is set, Garden automatically sets `include` to equal the
# `files` directive so that only the Kubernetes manifests get included.
#
# include:
#   - Dockerfile
#   - my-app.js

# Specify a list of POSIX-style paths or glob patterns that should be excluded from the module. Files that match these
# paths or globs are excluded when computing the version of the module, when responding to filesystem watch events,
# and when staging builds.
#
# Note that you can also explicitly _include_ files using the `include` field. If you also specify the `include`
# field, the files/patterns specified here are filtered from the files matched by `include`. See the Configuration
# Files guide (https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories)
# for details.
#
# Unlike the `modules.exclude` field in the project config, the filters here have _no effect_ on which files and
# directories are watched for changes. Use the project `modules.exclude` field to affect those, if you have large
# directories that should not be watched for changes.
#
# exclude:
#   - tmp/**/*
#   - '*.log'

# A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific
# branch or tag, with the format: <git remote url>#<branch|tag>
#
# Garden will import the repository source code into this module, but read the module's config from the local
# garden.yml file.
#
# repositoryUrl: "git+https://github.com/org/repo.git#v2.0"

# When false, disables pushing this module to remote registries.
#
# allowPublish: true

# A list of files to write to the module directory when resolving this module. This is useful to automatically
# generate (and template) any supporting files needed for the module.
#
# generateFiles:
  #-# POSIX-style filename to read the source file contents from, relative to the path of the module (or the
    # ModuleTemplate configuration file if one is being applied).
    # This file may contain template strings, much like any other field in the configuration.
    #
    # sourcePath:

    # POSIX-style filename to write the resolved file contents to, relative to the path of the module.
    #
    # Note that any existing file with the same name will be overwritten. If the path contains one or more
    # directories, they will be automatically created if missing.
    #
    # targetPath:

    # The desired file contents as a string.
    #
    # value:

# The names of any services that this service depends on at runtime, and the names of any tasks that should be
# executed before this service is deployed.
#
# dependencies: []

# List of Kubernetes resource manifests to deploy. Use this instead of the `files` field if you need to resolve
# template strings in any of the manifests.
#
# manifests:
  #-# The API version of the resource.
    #
    # apiVersion:

    # The kind of the resource.
    #
    # kind:

    #
    # metadata:
      # The name of the resource.
      #
      # name:

# POSIX-style paths to YAML files to load manifests from. Each can contain multiple manifests.
#
# files: []

# Deploy to a different namespace than the default one configured in the provider.
#
# namespace:

# The Deployment, DaemonSet or StatefulSet that Garden should regard as the _Garden service_ in this module (not to be
# confused with Kubernetes Service resources). Because a `kubernetes-module` can contain any number of Kubernetes
# resources, this needs to be specified for certain Garden features and commands to work.
#
# serviceResource:
  # The type of Kubernetes resource to sync files to.
  #
  # kind: Deployment

  # The name of the resource to sync to. If the module contains a single resource of the specified Kind, this can be
  # omitted.
  #
  # name:

  # The name of a container in the target. Specify this if the target contains more than one container and the main
  # container is not the first container in the spec.
  #
  # containerName:

  # The Garden module that contains the sources for the container. This needs to be specified under `serviceResource`
  # in order to enable hot-reloading, but is not necessary for tasks and tests.
  # Must be a `container` module, and for hot-reloading to work you must specify the `hotReload` field on the
  # container module.
  # Note: If you specify a module here, you don't need to specify it additionally under `build.dependencies`
  #
  # containerModule: "my-container-module"

  # If specified, overrides the arguments for the main container when running in hot-reload mode.
  #
  # hotReloadArgs:
  #   - nodemon
  #   - my-server.js

#
# tasks:
  #-# The name of the task.
    #
    # name:

    # A description of the task.
    #
    # description:

    # The names of any tasks that must be executed, and the names of any services that must be running, before this
    # task is executed.
    #
    # dependencies: []

    # Set this to `true` to disable the task. You can use this with conditional template strings to enable/disable
    # tasks based on, for example, the current environment or other variables (e.g. `enabled: \${environment.name !=
    # "prod"}`). This can be handy when you only want certain tasks to run in specific environments, e.g. only for
    # development.
    #
    # Disabling a task means that it will not be run, and will also be ignored if it is declared as a runtime
    # dependency for another service, test or task.
    #
    # Note however that template strings referencing the task's outputs (i.e. runtime outputs) will fail to resolve
    # when the task is disabled, so you need to make sure to provide alternate values for those if you're using them,
    # using conditional expressions.
    #
    # disabled:

    # Maximum duration (in seconds) of the task's execution.
    #
    # timeout:

    # The Deployment, DaemonSet or StatefulSet that Garden should use to execute this task. If not specified, the
    # `serviceResource` configured on the module will be used. If neither is specified, an error will be thrown.
    #
    # resource:
      # The type of Kubernetes resource to sync files to.
      #
      # kind: Deployment

      # The name of the resource to sync to. If the module contains a single resource of the specified Kind, this can
      # be omitted.
      #
      # name:

      # The name of a container in the target. Specify this if the target contains more than one container and the
      # main container is not the first container in the spec.
      #
      # containerName:

    # Set to false if you don't want the task's result to be cached. Use this if the task needs to be run any time
    # your project (or one or more of the task's dependants) is deployed. Otherwise the task is only re-run when its
    # version changes (i.e. the module or one of its dependencies is modified), or when you run `garden run task`.
    #
    # cacheResult: true

    # The command/entrypoint used to run the task inside the container.
    #
    # command:
    #   - /bin/sh
    #   - '-c'

    # The arguments to pass to the container used for execution.
    #
    # args:
    #   - rake
    #   - 'db:migrate'

    # Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with
    # `GARDEN`) and values must be primitives or references to secrets.
    #
    # env:
    #     - MY_VAR: some-value
    #       MY_SECRET_VAR:
    #         secretRef:
    #           name: my-secret
    #           key: some-key
    #     - {}

    # Specify artifacts to copy out of the container after the run. The artifacts are stored locally under
    # the `.garden/artifacts` directory.
    #
    # artifacts:
      #-# A POSIX-style path or glob to copy. Must be an absolute path. May contain wildcards.
        #
        # source: "/output/**/*"

        # A POSIX-style path to copy the artifacts to, relative to the project artifacts directory at
        # `.garden/artifacts`.
        #
        # target: "outputs/foo/"

#
# tests:
  #-# The name of the test.
    #
    # name:

    # The names of any services that must be running, and the names of any tasks that must be executed, before the
    # test is run.
    #
    # dependencies: []

    # Set this to `true` to disable the test. You can use this with conditional template strings to
    # enable/disable tests based on, for example, the current environment or other variables (e.g.
    # `enabled: \${environment.name != "prod"}`). This is handy when you only want certain tests to run in
    # specific environments, e.g. only during CI.
    #
    # disabled:

    # Maximum duration (in seconds) of the test run.
    #
    # timeout:

    # The Deployment, DaemonSet or StatefulSet that Garden should use to execute this test suite. If not specified,
    # the `serviceResource` configured on the module will be used. If neither is specified, an error will be thrown.
    #
    # resource:
      # The type of Kubernetes resource to sync files to.
      #
      # kind: Deployment

      # The name of the resource to sync to. If the module contains a single resource of the specified Kind, this can
      # be omitted.
      #
      # name:

      # The name of a container in the target. Specify this if the target contains more than one container and the
      # main container is not the first container in the spec.
      #
      # containerName:

    # The command/entrypoint used to run the test inside the container.
    #
    # command:
    #   - /bin/sh
    #   - '-c'

    # The arguments to pass to the container used for testing.
    #
    # args:
    #   - npm
    #   - test

    # Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with
    # `GARDEN`) and values must be primitives or references to secrets.
    #
    # env:
    #     - MY_VAR: some-value
    #       MY_SECRET_VAR:
    #         secretRef:
    #           name: my-secret
    #           key: some-key
    #     - {}

    # Specify artifacts to copy out of the container after the run. The artifacts are stored locally under
    # the `.garden/artifacts` directory.
    #
    # artifacts:
      #-# A POSIX-style path or glob to copy. Must be an absolute path. May contain wildcards.
        #
        # source: "/output/**/*"

        # A POSIX-style path to copy the artifacts to, relative to the project artifacts directory at
        # `.garden/artifacts`.
        #
        # target: "outputs/foo/"
